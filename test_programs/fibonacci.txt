		ADD R0, R0, #7					; init argument

		SUBS R7, R0, #0					; if arg is 0 then goto arg_equals_0
		BEQ arg_equals_0

		SUBS R7, R0, #1					; if arg is 1 then goto arg_equals_1
		BEQ arg_equals_1

		ADD R1, R1, #1					; i = 1
		ADD R2, R2, #0					; fib n-2
		ADD R3, R3, #1					; fib n-1

fib
		ADD R4, R2, R3					; fib n-2  + fib n-1
		
		LDR R2, [R8, #0]				; reset R2 to 0
		ADD R2, R2, R3					; fib n-2  = fib n-1
		
		LDR R3, [R8, #0]				; reset R3 to 0
		ADD R3, R3, R4					; fib n-1  = fib n
		
		ADD R1, R1, #1					; i = i + 1
		SUBS R7, R1, R0					; check if i == n
		BNE fib						; loop if i != n
		B stop
		
arg_equals_0					
		B stop						; result 0
		
arg_equals_1
		ADD R4, R4, #1					; make result 1
		B stop

;Final result 13 will be saved to R4