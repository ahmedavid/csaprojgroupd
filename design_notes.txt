32 bit single-cycle cpu were developed, that supports following instructions:
	1. Data processing instructions – ADD, AND, SUB, ORR (along with S for setting flags)
	2. Branch instruction – B
	3. Memory instructions – LDR, STR
According to the requirements, LDR instruction does not support pre-index and post-index modes. For the same reasons, Data processing instructions, does not support logical or arithmetic shifts which can be part of these instructions.

To execute the tests which are included in the project deliverable, follow these steps:
	1. Open the single_cycle_cpu.circ through Logisim
	2. Right click on the ROM
	3. Select Edit Contents. As a result Hex Edior window should be visible
	4. In the Hex Editor window press "open" button
	5. Select the test that needs to be executed
	6. Close the Hex Editor window
	7. In Logisim press the Simulate dropdown and in the dropdown press the Ticks Enabled button 

Below are the descriptions of the components which together make up the single cycle processor:
1. Program Counter:
2. ROM:
3. RAM:
4. Control Unit:
	1. Main Decoder:
	   Main Decoder is responsible for the most of the control signals which let or avoid a change in the architectural state of the processor. Based on its inputs (Op (1:0), Funct (5, 0)) it updates
	   control signals. Besides that it provides ALU decoder and PC Logic with signals. All of the logic of Main Decoder is based on the truth table which combines Op, Funct0 and Funct5. These are the 
	   signals controlled by Main Decoder: RegW, MemW, MemToReg, ALUSrc, ImmSrc, RegSrc.
	2. ALU Decoder:
	   ALU Decoder is responsible for 2 control signals: ALUControl (commands the type of operation ALU should do) and FlagW (decides which flags should be updated as a result of ALU operation).
	   ALU Decoder accepts ALUOp from Main Decoder (type of operation as addition, subtraction, and, or) and Funct(4:0).
	3. Condition Check:
	   Condition Check is responsible for enabling/disabling 3 control signals: PCS, RegW, MemW. It accepts Cond(3:0) and all 4 flags and based on the truth table generates new signals. 
	   PCSrc decides which signal will update PC: +4 or instruction result. RegWrite decides whether as a result of instruction Address 3 should be updated or not. And MemWrite decides whether
	   Memory should be updated as a result of an instruction or not.
5. Register File:
6. Extender:
7. ALU: