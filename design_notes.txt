32 bit single-cycle cpu were developed, that supports following instructions:
	1. Data processing instructions – ADD, AND, SUB, ORR (along with S for setting flags)
	2. Branch instruction – B
	3. Memory instructions – LDR, STR
According to the requirements, LDR instruction does not support pre-index and post-index modes. For the same reasons, Data processing instructions, does not support logical or arithmetic shifts which can be part of these instructions.

To execute the tests which are included in the project deliverable, follow these steps:
	1. Open the single_cycle_cpu.circ through Logisim
	2. Right click on the ROM
	3. Select Edit Contents. As a result Hex Edior window should be visible
	4. In the Hex Editor window press "open" button
	5. Select test_program_all(or any other test) file from test folder
	6. Close the Hex Editor window
	7. In Logisim press the Simulate dropdown and in the dropdown press the Ticks Enabled button 

Below are the descriptions of the components which together make up the single cycle processor:
1. Program Counter: 
	Program counter stores the address of the instructions. The output value of PC is the input of the instructions memory(ROM). The address of the next instruction can be computed like PC+4, or PC+8 depending on if program requires branching or not.
2. ROM: 
	ROM stands for the instruction memory. It stores machine language code of instructions. It has one 8 bits input and 32 bits output. 
3. RAM: 
	RAM stands for the data memory. Data memory stores the data for instructions and it is controlled with MemWrite which enable or disable writing to memory. Besides it is possible to write to data memory via STR, and read from memory via LDR.
4. Control Unit:
	1. Main Decoder:
	   	Main Decoder is responsible for the most of the control signals which let or avoid a change in the architectural state of the processor. Based on its inputs (Op (1:0), Funct (5, 0)) it updates
	   control signals. Besides that it provides ALU decoder and PC Logic with signals. All of the logic of Main Decoder is based on the truth table which combines Op, Funct0 and Funct5. These are the 
	   signals controlled by Main Decoder: RegW, MemW, MemToReg, ALUSrc, ImmSrc, RegSrc.
	2. ALU Decoder:
	   	ALU Decoder is responsible for 2 control signals: ALUControl (commands the type of operation ALU should do) and FlagW (decides which flags should be updated as a result of ALU operation).
	   ALU Decoder accepts ALUOp from Main Decoder (type of operation as addition, subtraction, and, or) and Funct(4:0).
	3. Condition Check:
	   	Condition Check is responsible for enabling/disabling 3 control signals: PCS, RegW, MemW. It accepts Cond(3:0) and all 4 flags and based on the truth table generates new signals. 
	   PCSrc decides which signal will update PC: +4 or instruction result. RegWrite decides whether as a result of instruction Address 3 should be updated or not. And MemWrite decides whether
	   Memory should be updated as a result of an instruction or not.
5. Register File:
	Regsiter file is responsible for reading the values of the registers and also writing a value back to the specified register if RegWrite signal is set to 1.
6. Extender:
	Extender extends the immediate value up to 32 bits. For Data Processing instructions it extends 8 bit unsigned immediate, for Memory instructions it extends 12 bit unsigned immediate and for Branch instructions it extends 24 bit signed immediate 
which is multiplied by 4.
7. ALU:
	ALU supports "and", "or", "addition", and "subtraction" operations which can be determined by ALUControl. It also produces ALUFlags such as N, Z, V, C which later can be used by cpu for conditional execution.
8. Instruction Splitter: 
	Instruction Splitter is responsible for splitting 32 bit instruction into several parts, which later can be used by other components of the processor. Some of these parts are: cond, op, funct and etc.
9. 32 to 8 Adapter:
	This adapter is repsonsible for taking the first 8 bits from the 32 bit address, which later will be used as an address bit to the ROM and RAM. 8 bit width address for ROM and RAM has been chosen since it was enough for the purposes of this cpu.